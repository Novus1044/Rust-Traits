In this folder we will be implementing the Iterator trait for our data type from the IntoIterator section. We had four 
different implementations of the IntoIterator for our type (varying based on the genericity of the base structure) so this 
folder will have a corresponding implementation for each of those source files.

When we implement the Iterator trait for a type we are actually defining how the values of our iterator will be generated.
The Iterator trait defines a method called `next` which describes specifically how the Iterator values will be returned.

In the following examples, the `next` method is defined to return the values of the structure's fields in order. This was
chosen for simplicity. You could define `next` to do whatever you want. This flexibilty is important because the iteration
can be defined in a way that is useful for the type but it would also allow for a completely useless implementation.

The for loop contains syntactic-sugar which hides the fact that your type is repeatedly calling the `next` method.
Here is a simple example taken from the Rust docs showing the actual operation of the for loop syntax. 

From Rust Docs:

fn main() -> () {

  let values = vec!( 1, 2, 3, 4, 5 );  // vec! is a macro that builds a Vector and returns an immutable copy of the Vector
  
  for x in values {
    println!( "{}", x );
  }
}

This would de-sugar into the following:

fn main() -> () {

  let values = vec!( 1, 2, 3, 4, 5 );
  {
    let result = match IntoIterator::into_iter( values ) {
      mut iter => loop {
        match iter.next() {                      // the loop repeatedly calls the .next() method until None is returned
          Some(x) => { println!( "{}", x ); },
          None    => { break; },
        }
      },
    };
    result
  }
}
     
  
